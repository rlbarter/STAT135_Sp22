m <- length(y)
xbar <- mean(x)
xbar
ybar <- mean(y)
ybar
s1 <- sd(x)
s1
s2 <- sd(y)
s2
sp <- sqrt(((n-1)*s1^2 + (m-1)*s2^2) / (n + m - 2))
sp
# test statistic
t <- (xbar - ybar) / (sp * sqrt(1/n + 1/m))
t
df <- n + m - 2
df
# p-value
2*(1 - pt(t, df))
# Check answer with t.test (set variance equal):
t.test(x, y, alternative = "two.sided", var.equal = TRUE)
n <- length(y)
m <- length(x)
# combine the two datasets into one (smaller dataset first)
z <- c(y, x)
z
# compute the ranks
ranks <- rank(z)
ranks
r1 <- sum(ranks[1:n])
r1
r2 <- sum(ranks[(n + 1):(n + m)])
r2
# combine the two datasets into one (smaller dataset first)
z <- c(x, y)
z
# compute the ranks
ranks <- rank(z)
ranks
r1 <- sum(ranks[1:n])
r1
r2 <- sum(ranks[(n + 1):(n + m)])
r2
x <- c(20.4, 24.2, 15.4, 21.4, 20.2, 18.5, 21.5)
y <- c(20.2, 16.9, 18.4, 17.3, 20.5)
# compute all the things we need:
n <- length(x)
m <- length(y)
xbar <- mean(x)
xbar
ybar <- mean(y)
ybar
s1 <- sd(x)
s1
s2 <- sd(y)
s2
sp <- sqrt(((n-1)*s1^2 + (m-1)*s2^2) / (n + m - 2))
sp
# test statistic
t <- (xbar - ybar) / (sp * sqrt(1/n + 1/m))
t
df <- n + m - 2
df
# p-value
2*(1 - pt(t, df))
# Check answer with t.test (set variance equal):
t.test(x, y, alternative = "two.sided", var.equal = TRUE)
# Compare with variance unequal (Welch's) test
t.test(x, y, alternative = "two.sided")
n <- length(y)
m <- length(x)
# combine the two datasets into one (smaller dataset first)
z <- c(x, y)
z
# compute the ranks
ranks <- rank(z)
ranks
r1 <- sum(ranks[1:n])
r1
r2 <- sum(ranks[(n + 1):(n + m)])
r2
ranks
n <- length(x)
m <- length(y)
# combine the two datasets into one (smaller dataset first)
z <- c(x, y)
z
# compute the ranks
ranks <- rank(z)
ranks
r1 <- sum(ranks[1:n])
r1
r2 <- sum(ranks[(n + 1):(n + m)])
r2
u1 <- n * m  + n * (n + 1) / 2 - r1
u1
u2 <- n * m  + m * (m + 1) / 2 - r2
u2
u <- min(u1, u2)
u
# Mann-whitney non-parametric test
wilcox.test(x, y, alternative = "two.sided")
# Mann-whitney non-parametric test
wilcox.test(x, y, alternative = "two.sided", exact = FALSE)
# p-value
2*(1 - pt(t, df))
# Mann-whitney non-parametric test
wilcox.test(x, y, alternative = "two.sided", exact = FALSE)
# Mann-whitney non-parametric test
wilcox.test(x, y, alternative = "two.sided", exact = FALSE)
?wilcox.test
# Mann-whitney non-parametric test
wilcox.test(y, x, alternative = "two.sided", exact = FALSE)
x <- c(125, 132, 138, 120, 125, 127, 136, 139, 131, 132, 135, 136, 128, 127, 130)
y <- c(118, 134, 130, 124, 105, 130, 130, 132, 123, 128, 126, 140, 135, 126, 132)
d <- x - y
n <- length(d)
dbar <- mean(d)
dbar
s_d <- sd(d)
s_d
3.2 / (7.1 / sqrt(15))
df <- n - 2
df
df <- n - 1
df
# p-value
1 - pt(t, df)
x <- c(125, 132, 138, 120, 125, 127, 136, 139, 131, 132, 135, 136, 128, 127, 130)
y <- c(118, 134, 130, 124, 105, 130, 130, 132, 123, 128, 126, 140, 135, 126, 132)
d <- x - y
n <- length(d)
dbar <- mean(d)
dbar
s_d <- sd(d)
s_d
# test statistic
t <- (xbar - ybar) / (sp * sqrt(1/n + 1/m))
t
df <- n - 1
# test statistic
t <- d / (s_d / sqrt(n))
t
# test statistic
t <- dbar / (s_d / sqrt(n))
t
df <- n - 1
df
# p-value
1 - pt(t, df)
# Check answer with t.test (set variance equal):
t.test(x, y, alternative = "greater", paired = TRUE)
pbinom(10, size = 15, 0.5)
1 - pbinom(10, size = 15, 0.5)
1 - dbinom(10, size = 15, 0.5)
dbinom(10, size = 15, 0.5)
dbinom(5, size = 15, 0.5)
dbinom(1, size = 15, 0.5)
dbinom(2, size = 15, 0.5)
dbinom(10, size = 15, 0.5) + dbinom(11, size = 15, 0.5) + dbinom(12, size = 15, 0.5) +
dbinom(13, size = 15, 0.5)
dbinom(10, size = 15, 0.5) + dbinom(11, size = 15, 0.5) + dbinom(12, size = 15, 0.5) + dbinom(13, size = 15, 0.5) + dbinom(14, size = 15, 0.5) + dbinom(15, size = 15, 0.5)
1 - dbinom(11, size = 15, 0.5)
1 - dbinom(9, size = 15, 0.5)
1 - pbinom(9, size = 15, 0.5)
15 * 0.5
15 * 0.5 * 0.5
10 - 7.5
2.5 / 3.75
2.5 / sqrt(3.75)
1 - pnorm(1.29)
x <- c(125, 132, 138, 120, 125, 127, 136, 139, 131, 132, 135, 136, 128, 127, 130)
y <- c(118, 134, 130, 124, 105, 130, 130, 132, 123, 128, 126, 140, 135, 126, 132)
d <- x - y
d
signs <- sign(d)
signs
signs <- sign(d)
w <- sum(signs == 1)
pval <- 1 - pbinom(w, n, 0.5)
pval
# using an inbuilt test
binom.test(w, n, alternative = "greater")
w <- sum(signs == 1)
w
d
mean(d)
1 - pinom(8, 15)
1 - pbinom(8, 15, 0.5)
1 - pbinom(9, 15, 0.5)
rank(d)
# compute the p-value using the
pval <- 1 - pbinom((w-1), n, 0.5)
pval
# using an inbuilt test
binom.test(w, n, alternative = "greater")
wilcox.test(x, y, paired = TRUE, alternative = "greater")
r <- rank(d)
signs <- sign(d)
r <- rank(d)
w <- signs * r
w
w_stat <- sum(w[w > 0])
w_stat
n * (n + 1) / 4
mean(w)
mean(w_stat)
sum(w[w > 0])
z <- (w_stat - w_stat_mean) / sqrt(w_stat_var)
# compute expected value of test statistic under H0
w_stat_mean <- n * (n + 1) / 4
# compute variance of test statistic under H0
w_stat_var <- n * (n + 1) * (2*n + 1) / 24
z <- (w_stat - w_stat_mean) / sqrt(w_stat_var)
z
pval <- 1 - pnorm(z)
pval
wilcox.test(x, y, paired = TRUE,
alternative = "greater", exact = FALSE)
w
w_stat
w[w > 0]
# compute expected value of test statistic under H0
w_stat_mean <- n * (n + 1) / 4
# compute variance of test statistic under H0
w_stat_var <- n * (n + 1) * (2*n + 1) / 24
z <- (w_stat - w_stat_mean) / sqrt(w_stat_var)
z
pval <- 1 - pnorm(z)
pval
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE)
# compute test statistic
w_stat <- sum(w[w > 0])
w_stat
x <- c(125, 132, 138, 120, 125, 127, 136, 139, 131, 132, 135, 136, 128, 127, 130)
y <- c(118, 134, 130, 124, 105, 130, 130, 132, 123, 128, 126, 140, 135, 126, 132)
d <- x - y
# compute all the things we need:
n <- length(d)
dbar <- mean(d)
dbar
s_d <- sd(d)
s_d
# test statistic
t <- dbar / (s_d / sqrt(n))
t
df <- n - 1
df
# p-value
1 - pt(t, df)
# Check answer with t.test (set paired = TRUE):
t.test(x, y, alternative = "greater", paired = TRUE)
# compute the signs of the differences
signs <- sign(d)
# compute the number of positive differences
w <- sum(signs == 1)
w
# compute the p-value using the pbinom function
pval <- 1 - pbinom((w-1), n, 0.5)
pval
# using an inbuilt test
binom.test(w, n, alternative = "greater")
#-----------------------------------------------------------------------------#
####################### Wilcoxon signed rank test #############################
#-----------------------------------------------------------------------------#
n <- length(d)
signs <- sign(d)
r <- rank(d)
w <- signs * r
w
# compute test statistic
w_stat <- sum(w[w > 0])
w_stat
# compute expected value of test statistic under H0
w_stat_mean <- n * (n + 1) / 4
# compute variance of test statistic under H0
w_stat_var <- n * (n + 1) * (2*n + 1) / 24
z <- (w_stat - w_stat_mean) / sqrt(w_stat_var)
z
pval <- 1 - pnorm(z)
pval
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE)
w
wilcox.test(x, y, paired = TRUE,
alternative = "less",
exact = FALSE)
z <- (w_stat - w_stat_mean) / sqrt(w_stat_var)
z
pval <- 1 - pnorm(z)
pval
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE)
# compute expected value of test statistic under H0
w_expected_val <- n * (n + 1) / 4
# compute variance of test statistic under H0
w_var <- n * (n + 1) * (2*n + 1) / 24
z <- (w_stat - w_expected_val) / sqrt(w_var)
z
# compute test statistic
w <- sum(signed_r)
w
# compute test statistic
w <- sum(signed_r)
# compute signed ranks
signed_r <- signs * r
signed_r
# compute test statistic
w <- sum(signed_r)
w
# compute expected value of test statistic under H0
w_expected_val <- n * (n + 1) / 4
# compute variance of test statistic under H0
w_var <- n * (n + 1) * (2*n + 1) / 24
z <- (w_stat - w_expected_val) / sqrt(w_var)
z
pval <- 1 - pnorm(z)
pval
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE)
x <- c(125, 132, 138, 120, 125, 127, 136, 139, 131, 132, 135, 136, 128, 127, 130)
y <- c(118, 134, 130, 124, 105, 130, 130, 132, 123, 128, 126, 140, 135, 126, 132)
d <- x - y
#-----------------------------------------------------------------------------#
####################### Wilcoxon signed rank test #############################
#-----------------------------------------------------------------------------#
n <- length(d)
signs <- sign(d)
# compute ranks of signed
r <- rank(d)
# compute signed ranks
signed_r <- signs * r
signed_r
# compute test statistic
w <- sum(signed_r)
w
# compute expected value of test statistic under H0
w_expected_val <- n * (n + 1) / 4
# compute variance of test statistic under H0
w_var <- n * (n + 1) * (2*n + 1) / 24
z <- (w_stat - w_expected_val) / sqrt(w_var)
z
z <- (w - w_expected_val) / sqrt(w_var)
z
pval <- 1 - pnorm(z)
pval
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE)
signed_r[signed_r > 0]
# compute test statistic
w <- sum(signed_r[signed_r > 0])
w
# compute expected value of test statistic under H0
w_expected_val <- n * (n + 1) / 4
# compute variance of test statistic under H0
w_var <- n * (n + 1) * (2*n + 1) / 24
z <- (w - w_expected_val) / sqrt(w_var)
z
pval <- 1 - pnorm(z)
pval
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE)
(w - w_expected_val)
w
w_expected_val
sqrt(w_var)
#-----------------------------------------------------------------------------#
####################### Wilcoxon signed rank test #############################
#-----------------------------------------------------------------------------#
n <- length(d)
signs <- sign(d)
signs
r
# compute signed ranks
signed_r <- signs * r
signed_r
# compute test statistic
w <- sum(signed_r[signed_r > 0])
w
signed_r[signed_r > 0]
# compute expected value of test statistic under H0
w_expected_val <- n * (n + 1) / 4
# compute variance of test statistic under H0
w_var <- n * (n + 1) * (2*n + 1) / 24
z <- (w - w_expected_val) / sqrt(w_var)
z
pval <- 1 - pnorm(z)
pval
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE)
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE, correct = FALSE)
pval
n * (n + 1) / 4
n * (n + 1) * (2*n + 1) / 24
z <- (w - w_expected_val) / sqrt(w_var)
z
pval <- 1 - pnorm(z)
pval
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE,
correct = FALSE)
wilcox.test(x, y, paired = TRUE,
alternative = "greater")
wilcox.test(x, y, paired = TRUE,
alternative = "greater",
exact = FALSE,
correct = FALSE)
2* (1 - pnorm(8.99))
x <- c(20.4, 24.2, 15.4, 21.4, 20.2, 18.5, 21.5)
y <- c(20.2, 16.9, 18.4, 17.3, 20.5)
# compute all the things we need:
n <- length(x)
m <- length(y)
xbar <- mean(x)
xbar
ybar <- mean(y)
ybar
s1 <- sd(x)
s1
s2 <- sd(y)
s2
sp <- sqrt(((n-1)*s1^2 + (m-1)*s2^2) / (n + m - 2))
sp
# test statistic
t <- (xbar - ybar) / (sp * sqrt(1/n + 1/m))
t
df <- n + m - 2
df
# p-value
2*(1 - pt(t, df))
# Check answer with t.test (set variance equal):
t.test(x, y, alternative = "two.sided", var.equal = TRUE)
# Compare with variance unequal (Welch's) test
t.test(x, y, alternative = "two.sided")
n <- length(x)
m <- length(y)
# combine the two datasets into one (smaller dataset first)
z <- c(x, y)
z
# compute the ranks
ranks <- rank(z)
ranks
r1 <- sum(ranks[1:n])
r1
r2 <- sum(ranks[(n + 1):(n + m)])
r2
u1 <- n * m  + n * (n + 1) / 2 - r1
u1
u2 <- n * m  + m * (m + 1) / 2 - r2
u2
u <- min(u1, u2)
u
# Mann-whitney non-parametric test
wilcox.test(x, y, alternative = "two.sided", exact = FALSE)
wilcox.test(y, x, alternative = "two.sided", exact = FALSE)
x <- c(20.4, 24.2, 15.4, 21.4, 20.2, 18.5, 21.5)
y <- c(20.2, 16.9, 18.4, 17.3, 20.5)
df <- (s1^2/n + s2^2/m)^2 / ((s1^4)/n^2 * (n-1) + (s2^4)/m^2 * (m-1))
df <- (s1^2/n + s2^2/m)^2 / ((s1^4)/n^2 * (n-1) + (s2^4)/m^2 * (m-1))
df
df <- (s1^2/n + s2^2/m)^2 / (s1^4 / (n^2 * (n-1)) + s2^4 / (m^2 * (m-1)))
df
s1
s2 <- sd(y)
s2
t <- (xbar - ybar) / (sqrt(s1^2/n + s2^2 / m))
2 * (1 - pt(t, df))
# compute all the things we need:
n <- length(x)
m <- length(y)
xbar <- mean(x)
xbar
ybar <- mean(y)
ybar
s1 <- sd(x)
s1
s2 <- sd(y)
s2
df <- (s1^2/n + s2^2/m)^2 / (s1^4 / (n^2 * (n-1)) + s2^4 / (m^2 * (m-1)))
df
t <- (xbar - ybar) / (sqrt(s1^2/n + s2^2 / m))
t
pval <- 2 * (1 - pt(t, df))
pval
# Compare with variance unequal (Welch's) test
t.test(x, y, alternative = "two.sided")
pval <- 2 * (1 - pt(t, 9.8))
pval
pval <- 2 * (1 - pt(t, 10))
pval
t
t <- (xbar - ybar) / (sqrt(s1^2/n + s2^2 / m))
t
sp <- sqrt(((n-1)*s1^2 + (m-1)*s2^2) / (n + m - 2))
sp
# test statistic
t <- (xbar - ybar) / (sp * sqrt(1/n + 1/m))
t
df <- n + m - 2
df
# p-value
2*(1 - pt(t, df))
