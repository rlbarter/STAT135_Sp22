x
y <- ames_train$sale_price
y
n <- length(y)
b1 <- cov(x, y) / var(x)
b1
# alternatively
b1 <- cor(x, y) * sd(y) / sd(x)
b1
b0 <- mean(y) - b1 * mean(x)
b0
yhat <- b0 + b1 * x
r <- y - yhat
sigma2_est <- sum(r^2) / (n-2)
sigma_b0_est <- sqrt(sigma2_est * sum(x^2) / (n * sum(x^2) - sum(x)^2))
sigma_b0_est
sigma_b1_est <- sqrt(n * sigma2_est / (n * sum(x^2) - sum(x)^2))
sigma_b1_est
t_b0 <- b0 / sigma_b0_est
t_b0
t_b1 <- b1 / sigma_b1_est
t_b1
p_b0 <- 2*(1 - pt(t_b0, n-2))
p_b0
p_b1 <- 2*(1 - pt(t_b1, n-2))
p_b1
# note that these values match what we get from summary(lm())
summary(ls_fit)
b0
b1
sigma2_est <- sum(r^2) / (n-2)
sigma2_est
sigma_b0_est <- sqrt(sigma2_est * sum(x^2) / (n * sum(x^2) - sum(x)^2))
sigma_b0_est
sigma_b1_est <- sqrt(n * sigma2_est / (n * sum(x^2) - sum(x)^2))
sigma_b1_est
t_b0 <- b0 / sigma_b0_est
t_b0
t_b1
p_b0 <- 2*(1 - pt(t_b0, n-2))
p_b0
library(tidyverse)
ames_train <- read_csv("ames_train.csv")
ames_train %>% print(width = Inf)
# for toy example, uncomment the following code
ames_train <- ames_train[1:10, ]
ls_fit <- lm(sale_price ~ total_living_area, ames_train)
x <- ames_train$total_living_area
x
y <- ames_train$sale_price
y
n <- length(y)
b1 <- cov(x, y) / var(x)
b1
# alternatively
b1 <- cor(x, y) * sd(y) / sd(x)
b1
b0 <- mean(y) - b1 * mean(x)
b0
yhat <- b0 + b1 * x
r <- y - yhat
sigma2_est <- sum(r^2) / (n-2)
sigma_b0_est <- sqrt(sigma2_est * sum(x^2) / (n * sum(x^2) - sum(x)^2))
sigma_b0_est
sigma_b1_est <- sqrt(n * sigma2_est / (n * sum(x^2) - sum(x)^2))
sigma_b1_est
t_b0 <- b0 / sigma_b0_est
t_b0
t_b1 <- b1 / sigma_b1_est
t_b1
p_b0 <- 2*(1 - pt(t_b0, n-2))
p_b0
p_b1 <- 2*(1 - pt(t_b1, n-2))
p_b1
# note that these values match what we get from summary(lm())
summary(ls_fit)
p_b0 <- 2*(1 - pt(t_b0, n-2))
p_b0
library(tidyverse)
ames_train <- read_csv("ames_train.csv")
ames_train %>% print(width = Inf)
# for toy example, uncomment the following code
ames_train <- ames_train[1:10, ]
ls_fit <- lm(sale_price ~ total_living_area, ames_train)
x <- ames_train$total_living_area
x
y <- ames_train$sale_price
y
n <- length(y)
b1 <- cov(x, y) / var(x)
b1
# alternatively
b1 <- cor(x, y) * sd(y) / sd(x)
b1
b0 <- mean(y) - b1 * mean(x)
b0
yhat <- b0 + b1 * x
r <- y - yhat
sigma2_est <- sum(r^2) / (n-2)
sigma_b0_est <- sqrt(sigma2_est * sum(x^2) / (n * sum(x^2) - sum(x)^2))
sigma_b0_est
sigma_b1_est <- sqrt(n * sigma2_est / (n * sum(x^2) - sum(x)^2))
sigma_b1_est
t_b0 <- b0 / sigma_b0_est
t_b0
t_b1 <- b1 / sigma_b1_est
t_b1
p_b0 <- 2*(1 - pt(abs(t_b0), n-2))
p_b0
p_b1 <- 2*(1 - pt(abs(t_b1), n-2))
p_b1
# note that these values match what we get from summary(lm())
summary(ls_fit)
p_b0
p_b1
p_b1
library(tidyverse)
ames_train <- read_csv("ames_train.csv")
ames_train %>% print(width = Inf)
# for toy example, uncomment the following code
ames_train <- ames_train[1:10, ]
ls_fit <- lm(sale_price ~ total_living_area, ames_train)
x <- ames_train$total_living_area
x
y <- ames_train$sale_price
y
n <- length(y)
b1 <- cov(x, y) / var(x)
b1
# alternatively
b1 <- cor(x, y) * sd(y) / sd(x)
b1
b0 <- mean(y) - b1 * mean(x)
b0
yhat <- b0 + b1 * x
r <- y - yhat
sigma2_est <- sum(r^2) / (n-2)
sigma_b0_est <- sqrt(sigma2_est * sum(x^2) / (n * sum(x^2) - sum(x)^2))
sigma_b0_est
sigma_b1_est <- sqrt(n * sigma2_est / (n * sum(x^2) - sum(x)^2))
sigma_b1_est
t_b0 <- b0 / sigma_b0_est
t_b0
t_b1 <- b1 / sigma_b1_est
t_b1
p_b0 <- 2*(1 - pt(abs(t_b0), n-2))
p_b0
p_b1 <- 2*(1 - pt(abs(t_b1), n-2))
p_b1
# note that these values match what we get from summary(lm())
summary(ls_fit)
library(tidyverse)
ames_train <- read_csv("ames_train.csv")
ames_train %>% print(width = Inf)
# For the toy example in the slides, we use only the first 10 rows
ames_train <- ames_train[1:10, ]
x <- ames_train$total_living_area
x
y <- ames_train$sale_price
y
n <- length(y)
b1 <- cov(x, y) / var(x)
# estimate coefficients using LS
b1 <- cov(x, y) / var(x)
b1
# alternatively
b1 <- cor(x, y) * sd(y) / sd(x)
b1
b0 <- mean(y) - b1 * mean(x)
b0
p_b0
p_b1
# note that these values match what we get from summary(lm())
ls_fit <- lm(sale_price ~ total_living_area, ames_train)
summary(ls_fit)
data.frame(y = y, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = y, y = yhat))
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = r, y = yhat))
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(y = yhat, x = residuals))
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(y = yhat, x = residuals)) +
geom_hline(yintercept = 0) +
theme_classic()
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals)) +
geom_hline(yintercept = 0) +
theme_classic()
data.frame(residuals = r, total_living_area = x) %>%
ggplot() +
geom_point(aes(x = total_living_area, y = residuals)) +
geom_hline(yintercept = 0) +
theme_classic()
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals)) +
geom_hline(yintercept = 0) +
theme_classic()
data.frame(residuals = r, total_living_area = x) %>%
ggplot() +
geom_point(aes(x = total_living_area, y = residuals)) +
geom_hline(yintercept = 0) +
theme_classic()
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals)) +
geom_hline(yintercept = 0) +
theme_classic()
library(tidyverse)
ames_train <- read_csv("ames_train.csv")
ames_train %>% print(width = Inf)
# For the toy example in the slides, we use only the first 10 rows
#ames_train <- ames_train[1:10, ]
x <- ames_train$total_living_area
x
y <- ames_train$sale_price
y
n <- length(y)
# estimate coefficients using LS
b1 <- cov(x, y) / var(x)
b1
# alternatively
b1 <- cor(x, y) * sd(y) / sd(x)
b1
b0 <- mean(y) - b1 * mean(x)
b0
# compute predictions
yhat <- b0 + b1 * x
# compute residuals
r <- y - yhat
# estimate sigma2
sigma2_est <- sum(r^2) / (n-2)
# compute SD of beta0
sigma_b0_est <- sqrt(sigma2_est * sum(x^2) / (n * sum(x^2) - sum(x)^2))
sigma_b0_est
# compute SD of beta1
sigma_b1_est <- sqrt(n * sigma2_est / (n * sum(x^2) - sum(x)^2))
sigma_b1_est
# compute test statistic of beta0
t_b0 <- b0 / sigma_b0_est
t_b0
# compute test statistic of beta1
t_b1 <- b1 / sigma_b1_est
t_b1
# compute p-value for beta0
p_b0 <- 2*(1 - pt(abs(t_b0), n-2))
p_b0
# compute p-value for beta1
p_b1 <- 2*(1 - pt(abs(t_b1), n-2))
p_b1
# note that these values match what we get from summary(lm())
ls_fit <- lm(sale_price ~ total_living_area, ames_train)
summary(ls_fit)
# residual plot
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals)) +
geom_hline(yintercept = 0) +
theme_classic()
library(scales)
# residual plot
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals),
alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_classic() +
scale_x_continuous(breaks )
# residual plot
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals),
alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_classic() +
scale_x_continuous(breaks = 1:5 * 1e05)
# residual plot
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals),
alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_classic() +
scale_x_continuous(breaks = 1:5 * 1e05,
labels = comma(1:5 * 1e05))
# residual plot
data.frame(residuals = r, yhat = yhat) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals),
alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_classic() +
scale_x_continuous(breaks = 1:5 * 1e05,
labels = comma(1:5 * 1e05)) +
scale_y_continuous(breaks = -2:3 * 1e05,
labels = comma(-2:3 * 1e05))
ames_train_full <- read_csv("ames_train_full.csv")
head(ames_train_full)
ames_train_full <- read_csv("ames_train_full.csv")
# residual plot
data.frame(residuals = ls_fit_full$residuals, yhat = ls_fit_full$fitted) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals),
alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_classic() +
scale_x_continuous(breaks = 1:5 * 1e05,
labels = comma(1:5 * 1e05)) +
scale_y_continuous(breaks = -2:3 * 1e05,
labels = comma(-2:3 * 1e05))
ames_train_full <- read_csv("ames_train_full.csv")
ls_fit_full <- lm(sale_price ~ ., ames_train_full)
summary(ls_fit_full)
# residual plot
data.frame(residuals = ls_fit_full$residuals, yhat = ls_fit_full$fitted) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals),
alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_classic() +
scale_x_continuous(breaks = 1:5 * 1e05,
labels = comma(1:5 * 1e05)) +
scale_y_continuous(breaks = -2:3 * 1e05,
labels = comma(-2:3 * 1e05))
ls_fit_full <- lm(sale_price ~ total_living_area +
year_built + bedrooms + neighborhood, ames_train_full)
ames_train_full <- read_csv("ames_train_multi.csv")
ames_train_full <- read_csv("ames_train_multi.csv")
ls_fit_full <- lm(sale_price ~ ., ames_train_full)
summary(ls_fit_full)
# residual plot
data.frame(residuals = ls_fit_full$residuals, yhat = ls_fit_full$fitted) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals),
alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_classic() +
scale_x_continuous(breaks = 1:5 * 1e05,
labels = comma(1:5 * 1e05)) +
scale_y_continuous(breaks = -2:3 * 1e05,
labels = comma(-2:3 * 1e05))
ls_fit_multi <- lm(sale_price ~ ., ames_train_multi)
summary(ls_fit_multi)
# recreate residual plot for multiple regression
ames_train_multi <- read_csv("ames_train_multi.csv")
ls_fit_multi <- lm(sale_price ~ ., ames_train_multi)
summary(ls_fit_multi)
# residual plot
data.frame(residuals = ls_fit_multi$residuals, yhat = ls_fit_multi$fitted) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals),
alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_classic() +
scale_x_continuous(breaks = 1:5 * 1e05,
labels = comma(1:5 * 1e05)) +
scale_y_continuous(breaks = -2:3 * 1e05,
labels = comma(-2:3 * 1e05))
summary(ls_fit_multi)
# recreate residual plot for multiple regression
ames_train_multi <- read_csv("ames_train_multi.csv")
ls_fit_multi <- lm(sale_price ~ total_living_area + quality_score +
year_built + bedrooms, ames_train_multi)
summary(ls_fit_multi)
# residual plot
data.frame(residuals = ls_fit_multi$residuals, yhat = ls_fit_multi$fitted) %>%
ggplot() +
geom_point(aes(x = yhat, y = residuals),
alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_classic() +
scale_x_continuous(breaks = 1:5 * 1e05,
labels = comma(1:5 * 1e05)) +
scale_y_continuous(breaks = -2:3 * 1e05,
labels = comma(-2:3 * 1e05))
library(tidyverse)
library(yardstick)
ames_train <- read_csv("ames_train_full.csv")
ames_test <- read_csv("ames_test_full.csv")
setwd("~/Google Drive/Work/Teaching/STAT135_2022/slides/13_multi_linear_predictions_extra")
ames_train <- read_csv("ames_train_full.csv")
ames_test <- read_csv("ames_test_full.csv")
ames_train %>% print(width = Inf)
# get performance on full set of features
lm_full <- lm(sale_price ~ ., ames_train)
pred_test <- predict(lm_full, ames_test)
lm_full
pred_test
rmse <- rmse_vec(ames_test$sale_price, pred_test)
rmse
rsq <- rsq_vec(ames_test$sale_price, pred_test)
rsq
ames_train %>%
# get correlation matrix
cor()
ames_train %>%
# get correlation matrix
cor()
ames_train %>%
# get correlation matrix
cor() %>%
# convert to data frame
as.data.frame()
ames_train %>%
# get correlation matrix
cor() %>%
# convert to data frame
as.data.frame() %>%
# create column from rownames
rownames_to_column(var = "var1")
ames_train %>%
# get correlation matrix
cor() %>%
# convert to data frame
as.data.frame() %>%
# create column from rownames
rownames_to_column(var = "var1") %>%
# create long-form data
pivot_longer(2:(ncol(ames_train) + 1),
names_to = "var2", values_to = "cor") %>% head
ames_train %>%
# get correlation matrix
cor() %>%
# convert to data frame
as.data.frame() %>%
# create column from rownames
rownames_to_column(var = "var1") %>%
# create long-form data
pivot_longer(2:(ncol(ames_train) + 1),
names_to = "var2", values_to = "cor") %>%
# remove rows computing correlation with sale price or of a variable with itself
filter(var1 != "sale_price", var2 != "sale_price",
var1 != var2) %>%
# arrange in decreasing absolute value correlation
arrange(desc(abs(cor)))
cor_df
# identify highly correlated variables
cor_df <- ames_train %>%
# get correlation matrix
cor() %>%
# convert to data frame
as.data.frame() %>%
# create column from rownames
rownames_to_column(var = "var1") %>%
# create long-form data
pivot_longer(2:(ncol(ames_train) + 1),
names_to = "var2", values_to = "cor")
cor_df
# identify which of each pair is more correlated with sale price
cor_df %>%
filter(var1 == "sale_price", var2 %in% c("garage_area", "garage_cars"))
cor_df %>%
filter(var1 == "sale_price", var2 %in% c("second_floor_area", "two_story"))
cor_df %>%
filter(var1 == "sale_price", var2 %in%  c("year_built", "garage_year"))
cor_df %>%
filter(var1 == "sale_price", var2 %in%  c("total_living_area", "total_rooms"))
# remove highly correlated variables
ames_train2 <- ames_train %>%
select(-garage_area,
-garage_year,
-total_rooms,
-two_story)
# fit LS
lm_cor2 <- lm(sale_price ~ ., data = ames_train2)
# generate test set predictions
pred_test_cor2 <- predict(lm_cor2, ames_test)
# compute rMSE
rmse <- rmse_vec(ames_test$sale_price, pred_test_cor2)
rmse
# compute Rsquared
rsq <- rsq_vec(ames_test$sale_price, pred_test_cor2)
rsq
# get performance on full set of features
lm_full <- lm(sale_price ~ ., ames_train)
pred_test <- predict(lm_full, ames_test)
rmse <- rmse_vec(ames_test$sale_price, pred_test)
rmse
rsq <- rsq_vec(ames_test$sale_price, pred_test)
rsq
cor_df <- ames_train %>%
select_if(is.numeric) %>%
# compute correlation matrix
cor() %>%
as.data.frame() %>%
# pull sale_price column
select(sale_price_cor = sale_price) %>%
# arrange in decreasing order of (abs val) sale price correlation
arrange(desc(abs(sale_price_cor))) %>%
rownames_to_column(var = "variable")
head(cor_df)
selected_vars <- cor_df %>%
filter(sale_price_cor > 0.3) %>%
pull(variable)
selected_vars
ames_train_cor <- ames_train %>%
select(one_of(selected_vars))
lm_cor <- lm(sale_price ~ ., data = ames_train_cor)
# generate test set predictions
pred_test_cor <- predict(lm_cor, ames_test)
# compute rMSE
rmse <- rmse_vec(ames_test$sale_price, pred_test_cor)
rmse
# compute Rsquared
rsq <- rsq_vec(ames_test$sale_price, pred_test_cor)
rsq
