bacteria <- bacteria %>%
mutate(expected = 400 * dpois(value, lambda_est), 1)
# chi-squared goodness of fit test
library(tidyverse)
# create the data
bacteria <-
data.frame(value = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19),
n_obs = c(56, 104, 80, 62, 42, 27, 9, 9, 5, 3, 2, 1))
bacteria
# estimate lambda
lambda_est <- sum(bacteria$value * bacteria$n_obs) / 400
lambda_est
# plot the distribution and our Poisson fit
x_seq <- 0:19
pois_fit <- data.frame(x = x_seq,
fit = dpois(x_seq, lambda_est))
ggplot(bacteria) +
geom_col(aes(x = value, y = n_obs / 400)) +
geom_line(aes(x = x, y = fit), data = pois_fit) +
theme_classic()
# compute the expected values
bacteria <- bacteria %>%
mutate(expected = 400 * dpois(value, lambda_est), 1)
bacteria
# Based on the rule that there can be no expected value cell less than 5,
# we need to aggregate the final 5 cells
bacteria_trimmed <- bacteria[1:7, ]
bacteria_trimmed[8, "n_obs"] <- sum(bacteria[8:12, "n_obs"])
bacteria_trimmed[8, "expected"] <- sum(bacteria[8:12, "expected"])
bacteria_trimmed[8, "value"] <- 7
bacteria_trimmed
# compute the expected values
bacteria <- bacteria %>%
mutate(expected = 400 * dpois(value, lambda_est))
bacteria
# chi-squared goodness of fit test
library(tidyverse)
# create the data
bacteria <-
data.frame(value = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19),
n_obs = c(56, 104, 80, 62, 42, 27, 9, 9, 5, 3, 2, 1))
bacteria
# estimate lambda
lambda_est <- sum(bacteria$value * bacteria$n_obs) / 400
lambda_est
# plot the distribution and our Poisson fit
x_seq <- 0:19
pois_fit <- data.frame(x = x_seq,
fit = dpois(x_seq, lambda_est))
ggplot(bacteria) +
geom_col(aes(x = value, y = n_obs / 400)) +
geom_line(aes(x = x, y = fit), data = pois_fit) +
theme_classic()
# compute the expected values
bacteria <- bacteria %>%
mutate(expected = 400 * dpois(value, lambda_est))
bacteria
# Based on the rule that there can be no expected value cell less than 5,
# we need to aggregate the final 5 cells
bacteria_trimmed <- bacteria[1:7, ]
bacteria_trimmed[8, "n_obs"] <- sum(bacteria[8:12, "n_obs"])
bacteria_trimmed[8, "expected"] <- sum(bacteria[8:12, "expected"])
bacteria_trimmed[8, "value"] <- 7
bacteria_trimmed
# compute the test statistic
bacteria <- bacteria %>%
mutate(x2 = (n_obs - expected)^2 / expected)
# compute the test statistic
bacteria_trimmed <- bacteria_trimmed %>%
mutate(x2 = (n_obs - expected)^2 / expected)
bacteria_trimmed
x2 <- sum(bacteria$x2)
x2
bacteria$x2
x2 <- sum(bacteria_trimmed$x2)
x2
chisq.test(x = bacteria_trimmed$n_obs,
p = round(dpois(bacteria_trimmed$value, lambda_est), 1))
bacteria_trimmed$n_obs
round(dpois(bacteria_trimmed$value, lambda_est), 1)
round(dpois(bacteria_trimmed$value, lambda_est), 2)
sum(round(dpois(bacteria_trimmed$value, lambda_est), 2))
chisq.test(x = bacteria_trimmed$n_obs,
p = round(dpois(bacteria_trimmed$value, lambda_est), 2))
chisq.test(x = bacteria_trimmed$n_obs,
p = round(dpois(bacteria_trimmed$value, lambda_est), 3))
# pvalue
1 - pchisq(x2, 6)
# pvalue
round(1 - pchisq(x2, 6), 3)
# create the data
mendel <-
data.frame(value = c("smooth yellow", "smooth green", "wrinkled yellow", "wrinkled green"),
n_obs = c(315, 108, 102, 31))
mendel
theoretical <-
data.frame(value = c("smooth yellow", "smooth green", "wrinkled yellow", "wrinkled green"),
p = c(9/16, 3/16, 3/16, 1/16))
theoretical
# compute the expected values
n <- sum(mendel$n_obs)
n
mendel <- mendel %>%
mutate(expected = n * theoretical$p))
mendel <- mendel %>%
mutate(expected = n * theoretical$p)
mendel
# create the data
mendel <-
data.frame(value = c("smooth yellow", "smooth green", "wrinkled yellow", "wrinkled green"),
obs = c(315, 108, 102, 31))
mendel
theoretical <-
data.frame(value = c("smooth yellow", "smooth green", "wrinkled yellow", "wrinkled green"),
p = c(9/16, 3/16, 3/16, 1/16))
theoretical
# compute the expected values
n <- sum(mendel$obs)
n
mendel <- mendel %>%
mutate(expected = n * theoretical$p)
mendel
# compute the test statistic
mendel <- mendel %>%
mutate(x2 = (obs - expected)^2 / expected)
mendel
x2 <- sum(bacteria_trimmed$x2)
x2
# pvalue
round(1 - pchisq(x2, 3), 3)
x2 <- sum(mendel$x2)
x2
# pvalue
round(1 - pchisq(x2, 3), 3)
mendel
ggplot(bacteria) +
geom_col(aes(x = value, y = obs / 400)) +
geom_line(aes(x = x, y = fit), data = pois_fit) +
theme_classic()
# chi-squared goodness of fit test
library(tidyverse)
# create the data
bacteria <-
data.frame(value = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19),
obs = c(56, 104, 80, 62, 42, 27, 9, 9, 5, 3, 2, 1))
bacteria
# estimate lambda
lambda_est <- sum(bacteria$value * bacteria$obs) / 400
lambda_est
# plot the distribution and our Poisson fit
x_seq <- 0:19
pois_fit <- data.frame(x = x_seq,
fit = dpois(x_seq, lambda_est))
ggplot(bacteria) +
geom_col(aes(x = value, y = obs / 400)) +
geom_line(aes(x = x, y = fit), data = pois_fit) +
theme_classic()
# compute the expected values
bacteria <- bacteria %>%
mutate(expected = 400 * dpois(value, lambda_est))
ggplot(bacteria) +
geom_col(aes(x = value, y = obs / 400)) +
geom_line(aes(x = x, y = fit), data = pois_fit) +
theme_classic() +
labs(x = "Density")
ggplot(bacteria) +
geom_col(aes(x = value, y = obs / 400)) +
geom_line(aes(x = x, y = fit), data = pois_fit) +
theme_classic() +
labs(y = "Density")
x <- c(20.4, 24.2, 15.4, 21.4, 20.2, 18.5, 21.5)
y <- c(20.2, 16.9, 18.4, 17.3, 20.5)
# compute all the things we need:
n <- length(x)
m <- length(y)
xbar <- mean(x)
xbar
ybar <- mean(y)
ybar
s1 <- sd(x)
s1
s2 <- sd(y)
s2
df <- (s1^2/n + s2^2/m)^2 / (s1^4 / (n^2 * (n-1)) + s2^4 / (m^2 * (m-1)))
df
t <- (xbar - ybar) / (sqrt(s1^2/n + s2^2 / m))
t
pval <- 2 * (1 - pt(t, df))
pval
n <- length(x)
n
m <- length(y)
m
# combine the two datasets into one (smaller dataset first)
z <- c(x, y)
z
# compute the ranks
ranks <- rank(z)
ranks
r1 <- sum(ranks[1:n])
r1
r2 <- sum(ranks[(n + 1):(n + m)])
r2
u1 <- n * m  + n * (n + 1) / 2 - r1
u1
u2 <- n * m  + m * (m + 1) / 2 - r2
u2
u <- min(u1, u2)
u
# Mann-whitney non-parametric test
wilcox.test(x, y, alternative = "two.sided", exact = FALSE)
wilcox.test(y, x, alternative = "two.sided", exact = FALSE)
# Mann-whitney non-parametric test
wilcox.test(x, y, alternative = "two.sided", exact = TRUE)
# Mann-whitney non-parametric test
wilcox.test(x, y, alternative = "two.sided", exact = FALSE)
# Mann-whitney non-parametric test
wilcox.test(x, y, alternative = "two.sided", exact = TRUE)
wilcox.test
n
x <- c(125, 132, 138, 120, 125, 127, 136, 139, 131, 132, 135, 136, 128, 127, 130)
y <- c(118, 134, 130, 124, 105, 130, 130, 132, 123, 128, 126, 140, 135, 126, 132)
d <- x - y
d
# compute all the things we need:
n <- length(d)
dbar <- mean(d)
dbar
s_d <- sd(d)
s_d
# test statistic
t <- dbar / (s_d / sqrt(n))
t
df <- n - 1
df
# p-value
1 - pt(t, df)
# Check answer with t.test (set paired = TRUE):
t.test(x, y, alternative = "greater", paired = TRUE)
# compute group means
group_means <- pizza_long %>%
group_by(pizza_place) %>%
summarise(mean = mean(time))
# ANOVA
library(tidyverse)
pizza
pizza_long
# Do the samples potentially have common variance?
pizza_long %>%
group_by(pizza_place) %>%
summarise(sd = sd(time))
# compute group means
group_means <- pizza_long %>%
group_by(pizza_place) %>%
summarise(mean = mean(time))
pizza <- data.frame(la_vals = c(32, 48, 51, 47, 41, 35, 37, 41, 43, 38),
sliver = c(27, 32, 37, 21, 25, 28, 36, 38, 29, 30),
artichoke = c(52, 40, 41, 36, 32, 38, 37, 42, 39, 30))
pizza_long <- pivot_longer(pizza, cols = everything(),
names_to = "pizza_place", values_to = "time")
# EDA: do the means of each group *look* different?
pizza_long %>%
ggplot() +
geom_boxplot(aes(x = pizza_place, y = time)) +
geom_hline(yintercept = mean(pizza_long$time), col = "orange") +
theme_classic() +
labs(y = "Delivery time", x = "Pizza place")
# Do the samples look normal?
pizza_long %>%
ggplot() +
geom_qq(aes(sample = time)) +
geom_qq_line(aes(sample = time)) +
facet_wrap(~pizza_place) +
theme_bw()
group_means
# compute group means
group_means <- pizza_long %>%
group_by(pizza_place) %>%
summarise(mean = mean(time))
group_means
global_mean <- pizza_long %>%
summarise(mean = mean(time))
global_mean
Lab_1 <- c(4.214,3.048,7.831,1.879,8.237,4.220,3.412,
3.611,3.928,2.575,3.687,2.869,5.610,4.595)
Lab_2 <- c(1.931,2.379,4.750,5.146,3.313,3.012,4.632,3.455,
4.118,4.477,2.290,5.622,4.732,4.904,3.445,3.804)
lab 1
Lab_1
Lab_2
data.frame(x = rnorm(10, 3, 1),
y = rnorm(10, 2, 1))
X = rnorm(10, 3, 1)
Y = rnorm(10, 2, 1)
data.frame(observation = c(1:10, "mean"),
X = c(X, mean(X)),
Y = c(Y, mean(Y)))
X = rnorm(10, 3, 1)
Y = rnorm(10, 2, 1)
data.frame(obs = c(1:10, "mean"),
X = c(X, mean(X)),
Y = c(Y, mean(Y)))
?kable
X = round(rnorm(10, 3, 1), 1)
Y = round(rnorm(10, 2, 1), 1)
data.frame(obs = c(1:10, "mean"),
X = c(X, mean(X)),
Y = c(Y, mean(Y))) %>%
knitr::kable()
library(tidyverse)
library(knitr)
set.seed(1749)
X = round(rnorm(10, 3, 1), 1)
Y = round(rnorm(10, 2, 1), 1)
data.frame(obs = c(1:10, "mean"),
X = c(X, mean(X)),
Y = c(Y, mean(Y))) %>%
knitr::kable()
set.seed(1749)
X = round(rnorm(10, 3, 1), 1)
Y = round(rnorm(10, 2.5, 1), 1)
data.frame(obs = c(1:10, "mean"),
X = c(X, mean(X)),
Y = c(Y, mean(Y))) %>%
knitr::kable()
set.seed(17492)
X = round(rnorm(10, 3, 1), 1)
Y = round(rnorm(10, 2.5, 1), 1)
data.frame(obs = c(1:10, "mean"),
X = c(X, mean(X)),
Y = c(Y, mean(Y))) %>%
knitr::kable()
set.seed(17492)
Appa = round(rnorm(10, 3, 1), 1)
Momo = round(rnorm(10, 2.5, 1), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
Appa = round(rnorm(10, 1.5, 1), 1)
Momo = round(rnorm(10, 2, 1), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
set.seed(17492)
Appa = round(rnorm(10, 1.5, 1), 1)
Momo = round(rnorm(10, 2, 1), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
set.seed(17492)
Appa = max(0, round(rnorm(10, 1.5, 1), 1))
Momo = max(0, round(rnorm(10, 2, 1), 1))
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
set.seed(17492)
Appa = round(rnorm(10, 1.5, 1), 1)
Momo = round(rnorm(10, 2, 1), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
set.seed(1742)
Appa = round(rnorm(10, 1.5, 1), 1)
Momo = round(rnorm(10, 2, 1), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
set.seed(172242)
Appa = round(rnorm(10, 1.5, 1), 1)
Momo = round(rnorm(10, 2, 1), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
set.seed(17224)
Appa = round(rnorm(10, 1.5, 1), 1)
Momo = round(rnorm(10, 2, 1), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
set.seed(17224)
Appa = round(rnorm(10, 1.6, 1), 1)
Momo = round(rnorm(10, 2, 1), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
set.seed(17224)
Appa = round(rnorm(10, 20, 5), 1)
Momo = round(rnorm(10, 30, 5), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
set.seed(17224)
Appa = round(rnorm(10, 25, 5), 1)
Momo = round(rnorm(10, 30, 5), 1)
data.frame(obs = c(1:10, "mean"),
Appa = c(Appa, mean(Appa)),
Momo = c(Momo, mean(Momo))) %>%
knitr::kable()
est <- mean(Appa) - mean(Momo)
sd <- 5
ci <- c(est - 1.96 * sd / sqrt(n), est + 1.96 * sd / sqrt(n))
ci
t.test(Appa, Momo)
qt(0.975, 9)
ci <- c(est - qt(0.975, 9) * sd(Appa) / sqrt(n), est + qt(0.975, 9) * sd(Momo) / sqrt(n))
t.test(Appa, Momo)
ci
qt(0.975, 9)
qnorm(0.975, 9)
qnorm(0.975)
sd(Appa)
sd(Momo)
ci <- c(est - qt(0.975, 9) * sd(Appa) / sqrt(n),
est + qt(0.975, 9) * sd(Momo) / sqrt(n))
ci
t.test(Appa, Momo)
ci <- c(est - qt(0.975, 9) * sd(Appa) / sqrt(n),
est + qt(0.975, 9) * sd(Momo) * (1 / sqrt(n) + 1 / sqrt(n)))
ci
t.test(Appa, Momo)
ci <- c(est - qt(0.975, 9) * sd(Appa) * 2 / sqrt(n),
est + qt(0.975, 9) * sd(Momo) * 2 / sqrt(n))
ci
t.test(Appa, Momo)
ci <- c(est - qt(0.975, 9) * sd(Appa) * sqrt(2/n),
est + qt(0.975, 9) * sd(Momo) * sqrt(2/n))
ci
t.test(Appa, Momo)
ci <- c(est - qt(0.975, 9) * sd(Appa) * sqrt(2/n),
est + qt(0.975, 9) * sd(Momo) * sqrt(2/n))
ci
t.test(Appa, Momo)
ci <- c(est - 1.96 * sd * sqrt(2 / n), est + 1.96 * sd * sqrt(2/n))
ci
t.test(Appa, Momo)
ci <- c(est - qt(0.975, 9) * sd(c(Appa, Momo) * sqrt(2/(2*n - 2)),
ci
t.test(Appa, Momo, var.equal = TRUE)
ci <- c(est - qt(0.975, 9) * sd(c(Appa, Momo)) * sqrt(2/(2*n - 2)),
est + qt(0.975, 9) * sd(c(Appa, Momo)) * sqrt(2/(2*n - 2)))
ci
t.test(Appa, Momo, var.equal = TRUE)
ci <- c(est - qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/(2*n - 2)),
est + qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/(2*n - 2)))
ci
sd(c(Appa, Momo))
ci <- c(est - qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/n),
est + qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/n))
ci
t.test(Appa, Momo, var.equal = TRUE)
c(Appa, Momo)
sd(c(Appa, Momo))
ci <- c(est - qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/n),
est + qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/n))
ci
t.test(Appa, Momo, var.equal = TRUE)
t <- est / (sd(c(Appa, Momo)) * sqrt(2/n))
t
est <- mean(Appa) - mean(Momo)
sd <- 5
n <- 10
ci <- c(est - 1.96 * sd * sqrt(2 / n), est + 1.96 * sd * sqrt(2/n))
ci
ci <- c(est - qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/n),
est + qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/n))
ci
t <- est / (sd(c(Appa, Momo)) * sqrt(2/n))
t
t.test(Appa, Momo, var.equal = TRUE)
ci
est <- mean(Appa) - mean(Momo)
sd <- 5
n <- 10
ci <- c(est - 1.96 * sd * sqrt(2 / n), est + 1.96 * sd * sqrt(2/n))
ci
z <- est / (5 * sqrt(2/n))
z
est
z
2 * (1 - pnorm(z))
z <- est / (5 * sqrt(2/n))
z
2 * (1 - pnorm(abs(z)))
#
#
#
# ci <- c(est - qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/n),
#         est + qt(0.975, 18) * sd(c(Appa, Momo)) * sqrt(2/n))
# ci
#
t <- est / (sd(c(Appa, Momo)) * sqrt(2/n))
t
z
ci <- c(est - 1.96 * sd * sqrt(2 / n), est + 1.96 * sd * sqrt(2/n))
ci
est
ci <- c(est - 1.96 * sd * sqrt(2 / n), est + 1.96 * sd * sqrt(2/n))
ci[2] - ci[1]
ci <- c((est + 0.5) - 1.96 * sd * sqrt(2 / n), (est + 0.5) + 1.96 * sd * sqrt(2/n))
ci[2] - ci[1]
1 - pnorm(1.96)
12 + 8 + 15 + 14
